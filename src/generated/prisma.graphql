# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Company implements Node {
  id: ID!
  cpname: String!
  cpaddress: String!
  street: String!
  email: String!
  phone: String!
  bsd: String!
  jtb_tin: String!
  cpsize: String!
  ownertype: String!
  regno: String!
  regstatus: String!
  language: String!
  category: String!
}

type Individual implements Node {
  id: ID!
  firstname: String!
  middlename: String!
  lastname: String!
  tin: String!
  gender: String!
  phone: String!
  email: String!
  maritalstatus: String!
  dateofbirth: String!
  address: String!
  street: String!
  lga: String!
  occupation: String!
  employeestatus: String!
  employer: String!
  language: String!
  marketassociation: String!
  parkassociation: String!
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type State implements Node {
  id: ID!
  title: String!
  code: String!
}


#
# Other Types
#

type AggregateCompany {
  count: Int!
}

type AggregateIndividual {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateState {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  cpname: String!
  cpaddress: String!
  street: String!
  email: String!
  phone: String!
  bsd: String!
  jtb_tin: String!
  cpsize: String!
  ownertype: String!
  regno: String!
  regstatus: String!
  language: String!
  category: String!
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  cpname_ASC
  cpname_DESC
  cpaddress_ASC
  cpaddress_DESC
  street_ASC
  street_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  bsd_ASC
  bsd_DESC
  jtb_tin_ASC
  jtb_tin_DESC
  cpsize_ASC
  cpsize_DESC
  ownertype_ASC
  ownertype_DESC
  regno_ASC
  regno_DESC
  regstatus_ASC
  regstatus_DESC
  language_ASC
  language_DESC
  category_ASC
  category_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  cpname: String!
  cpaddress: String!
  street: String!
  email: String!
  phone: String!
  bsd: String!
  jtb_tin: String!
  cpsize: String!
  ownertype: String!
  regno: String!
  regstatus: String!
  language: String!
  category: String!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  cpname: String
  cpaddress: String
  street: String
  email: String
  phone: String
  bsd: String
  jtb_tin: String
  cpsize: String
  ownertype: String
  regno: String
  regstatus: String
  language: String
  category: String
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cpname: String
  cpname_not: String
  cpname_in: [String!]
  cpname_not_in: [String!]
  cpname_lt: String
  cpname_lte: String
  cpname_gt: String
  cpname_gte: String
  cpname_contains: String
  cpname_not_contains: String
  cpname_starts_with: String
  cpname_not_starts_with: String
  cpname_ends_with: String
  cpname_not_ends_with: String
  cpaddress: String
  cpaddress_not: String
  cpaddress_in: [String!]
  cpaddress_not_in: [String!]
  cpaddress_lt: String
  cpaddress_lte: String
  cpaddress_gt: String
  cpaddress_gte: String
  cpaddress_contains: String
  cpaddress_not_contains: String
  cpaddress_starts_with: String
  cpaddress_not_starts_with: String
  cpaddress_ends_with: String
  cpaddress_not_ends_with: String
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  bsd: String
  bsd_not: String
  bsd_in: [String!]
  bsd_not_in: [String!]
  bsd_lt: String
  bsd_lte: String
  bsd_gt: String
  bsd_gte: String
  bsd_contains: String
  bsd_not_contains: String
  bsd_starts_with: String
  bsd_not_starts_with: String
  bsd_ends_with: String
  bsd_not_ends_with: String
  jtb_tin: String
  jtb_tin_not: String
  jtb_tin_in: [String!]
  jtb_tin_not_in: [String!]
  jtb_tin_lt: String
  jtb_tin_lte: String
  jtb_tin_gt: String
  jtb_tin_gte: String
  jtb_tin_contains: String
  jtb_tin_not_contains: String
  jtb_tin_starts_with: String
  jtb_tin_not_starts_with: String
  jtb_tin_ends_with: String
  jtb_tin_not_ends_with: String
  cpsize: String
  cpsize_not: String
  cpsize_in: [String!]
  cpsize_not_in: [String!]
  cpsize_lt: String
  cpsize_lte: String
  cpsize_gt: String
  cpsize_gte: String
  cpsize_contains: String
  cpsize_not_contains: String
  cpsize_starts_with: String
  cpsize_not_starts_with: String
  cpsize_ends_with: String
  cpsize_not_ends_with: String
  ownertype: String
  ownertype_not: String
  ownertype_in: [String!]
  ownertype_not_in: [String!]
  ownertype_lt: String
  ownertype_lte: String
  ownertype_gt: String
  ownertype_gte: String
  ownertype_contains: String
  ownertype_not_contains: String
  ownertype_starts_with: String
  ownertype_not_starts_with: String
  ownertype_ends_with: String
  ownertype_not_ends_with: String
  regno: String
  regno_not: String
  regno_in: [String!]
  regno_not_in: [String!]
  regno_lt: String
  regno_lte: String
  regno_gt: String
  regno_gte: String
  regno_contains: String
  regno_not_contains: String
  regno_starts_with: String
  regno_not_starts_with: String
  regno_ends_with: String
  regno_not_ends_with: String
  regstatus: String
  regstatus_not: String
  regstatus_in: [String!]
  regstatus_not_in: [String!]
  regstatus_lt: String
  regstatus_lte: String
  regstatus_gt: String
  regstatus_gte: String
  regstatus_contains: String
  regstatus_not_contains: String
  regstatus_starts_with: String
  regstatus_not_starts_with: String
  regstatus_ends_with: String
  regstatus_not_ends_with: String
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
}

input CompanyWhereUniqueInput {
  id: ID
}

type IndividualConnection {
  pageInfo: PageInfo!
  edges: [IndividualEdge]!
  aggregate: AggregateIndividual!
}

input IndividualCreateInput {
  firstname: String!
  middlename: String!
  lastname: String!
  tin: String!
  gender: String!
  phone: String!
  email: String!
  maritalstatus: String!
  dateofbirth: String!
  address: String!
  street: String!
  lga: String!
  occupation: String!
  employeestatus: String!
  employer: String!
  language: String!
  marketassociation: String!
  parkassociation: String!
}

type IndividualEdge {
  node: Individual!
  cursor: String!
}

enum IndividualOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  middlename_ASC
  middlename_DESC
  lastname_ASC
  lastname_DESC
  tin_ASC
  tin_DESC
  gender_ASC
  gender_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  maritalstatus_ASC
  maritalstatus_DESC
  dateofbirth_ASC
  dateofbirth_DESC
  address_ASC
  address_DESC
  street_ASC
  street_DESC
  lga_ASC
  lga_DESC
  occupation_ASC
  occupation_DESC
  employeestatus_ASC
  employeestatus_DESC
  employer_ASC
  employer_DESC
  language_ASC
  language_DESC
  marketassociation_ASC
  marketassociation_DESC
  parkassociation_ASC
  parkassociation_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type IndividualPreviousValues {
  id: ID!
  firstname: String!
  middlename: String!
  lastname: String!
  tin: String!
  gender: String!
  phone: String!
  email: String!
  maritalstatus: String!
  dateofbirth: String!
  address: String!
  street: String!
  lga: String!
  occupation: String!
  employeestatus: String!
  employer: String!
  language: String!
  marketassociation: String!
  parkassociation: String!
}

type IndividualSubscriptionPayload {
  mutation: MutationType!
  node: Individual
  updatedFields: [String!]
  previousValues: IndividualPreviousValues
}

input IndividualSubscriptionWhereInput {
  AND: [IndividualSubscriptionWhereInput!]
  OR: [IndividualSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndividualWhereInput
}

input IndividualUpdateInput {
  firstname: String
  middlename: String
  lastname: String
  tin: String
  gender: String
  phone: String
  email: String
  maritalstatus: String
  dateofbirth: String
  address: String
  street: String
  lga: String
  occupation: String
  employeestatus: String
  employer: String
  language: String
  marketassociation: String
  parkassociation: String
}

input IndividualWhereInput {
  AND: [IndividualWhereInput!]
  OR: [IndividualWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  middlename: String
  middlename_not: String
  middlename_in: [String!]
  middlename_not_in: [String!]
  middlename_lt: String
  middlename_lte: String
  middlename_gt: String
  middlename_gte: String
  middlename_contains: String
  middlename_not_contains: String
  middlename_starts_with: String
  middlename_not_starts_with: String
  middlename_ends_with: String
  middlename_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  tin: String
  tin_not: String
  tin_in: [String!]
  tin_not_in: [String!]
  tin_lt: String
  tin_lte: String
  tin_gt: String
  tin_gte: String
  tin_contains: String
  tin_not_contains: String
  tin_starts_with: String
  tin_not_starts_with: String
  tin_ends_with: String
  tin_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  maritalstatus: String
  maritalstatus_not: String
  maritalstatus_in: [String!]
  maritalstatus_not_in: [String!]
  maritalstatus_lt: String
  maritalstatus_lte: String
  maritalstatus_gt: String
  maritalstatus_gte: String
  maritalstatus_contains: String
  maritalstatus_not_contains: String
  maritalstatus_starts_with: String
  maritalstatus_not_starts_with: String
  maritalstatus_ends_with: String
  maritalstatus_not_ends_with: String
  dateofbirth: String
  dateofbirth_not: String
  dateofbirth_in: [String!]
  dateofbirth_not_in: [String!]
  dateofbirth_lt: String
  dateofbirth_lte: String
  dateofbirth_gt: String
  dateofbirth_gte: String
  dateofbirth_contains: String
  dateofbirth_not_contains: String
  dateofbirth_starts_with: String
  dateofbirth_not_starts_with: String
  dateofbirth_ends_with: String
  dateofbirth_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  lga: String
  lga_not: String
  lga_in: [String!]
  lga_not_in: [String!]
  lga_lt: String
  lga_lte: String
  lga_gt: String
  lga_gte: String
  lga_contains: String
  lga_not_contains: String
  lga_starts_with: String
  lga_not_starts_with: String
  lga_ends_with: String
  lga_not_ends_with: String
  occupation: String
  occupation_not: String
  occupation_in: [String!]
  occupation_not_in: [String!]
  occupation_lt: String
  occupation_lte: String
  occupation_gt: String
  occupation_gte: String
  occupation_contains: String
  occupation_not_contains: String
  occupation_starts_with: String
  occupation_not_starts_with: String
  occupation_ends_with: String
  occupation_not_ends_with: String
  employeestatus: String
  employeestatus_not: String
  employeestatus_in: [String!]
  employeestatus_not_in: [String!]
  employeestatus_lt: String
  employeestatus_lte: String
  employeestatus_gt: String
  employeestatus_gte: String
  employeestatus_contains: String
  employeestatus_not_contains: String
  employeestatus_starts_with: String
  employeestatus_not_starts_with: String
  employeestatus_ends_with: String
  employeestatus_not_ends_with: String
  employer: String
  employer_not: String
  employer_in: [String!]
  employer_not_in: [String!]
  employer_lt: String
  employer_lte: String
  employer_gt: String
  employer_gte: String
  employer_contains: String
  employer_not_contains: String
  employer_starts_with: String
  employer_not_starts_with: String
  employer_ends_with: String
  employer_not_ends_with: String
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  marketassociation: String
  marketassociation_not: String
  marketassociation_in: [String!]
  marketassociation_not_in: [String!]
  marketassociation_lt: String
  marketassociation_lte: String
  marketassociation_gt: String
  marketassociation_gte: String
  marketassociation_contains: String
  marketassociation_not_contains: String
  marketassociation_starts_with: String
  marketassociation_not_starts_with: String
  marketassociation_ends_with: String
  marketassociation_not_ends_with: String
  parkassociation: String
  parkassociation_not: String
  parkassociation_in: [String!]
  parkassociation_not_in: [String!]
  parkassociation_lt: String
  parkassociation_lte: String
  parkassociation_gt: String
  parkassociation_gte: String
  parkassociation_contains: String
  parkassociation_not_contains: String
  parkassociation_starts_with: String
  parkassociation_not_starts_with: String
  parkassociation_ends_with: String
  parkassociation_not_ends_with: String
}

input IndividualWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createState(data: StateCreateInput!): State!
  createIndividual(data: IndividualCreateInput!): Individual!
  createCompany(data: CompanyCreateInput!): Company!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateIndividual(data: IndividualUpdateInput!, where: IndividualWhereUniqueInput!): Individual
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  deletePost(where: PostWhereUniqueInput!): Post
  deleteState(where: StateWhereUniqueInput!): State
  deleteIndividual(where: IndividualWhereUniqueInput!): Individual
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertState(where: StateWhereUniqueInput!, create: StateCreateInput!, update: StateUpdateInput!): State!
  upsertIndividual(where: IndividualWhereUniqueInput!, create: IndividualCreateInput!, update: IndividualUpdateInput!): Individual!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyStates(data: StateUpdateInput!, where: StateWhereInput!): BatchPayload!
  updateManyIndividuals(data: IndividualUpdateInput!, where: IndividualWhereInput!): BatchPayload!
  updateManyCompanies(data: CompanyUpdateInput!, where: CompanyWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyStates(where: StateWhereInput!): BatchPayload!
  deleteManyIndividuals(where: IndividualWhereInput!): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State]!
  individuals(where: IndividualWhereInput, orderBy: IndividualOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Individual]!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  post(where: PostWhereUniqueInput!): Post
  state(where: StateWhereUniqueInput!): State
  individual(where: IndividualWhereUniqueInput!): Individual
  company(where: CompanyWhereUniqueInput!): Company
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  statesConnection(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateConnection!
  individualsConnection(where: IndividualWhereInput, orderBy: IndividualOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndividualConnection!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  node(id: ID!): Node
}

type StateConnection {
  pageInfo: PageInfo!
  edges: [StateEdge]!
  aggregate: AggregateState!
}

input StateCreateInput {
  title: String!
  code: String!
}

type StateEdge {
  node: State!
  cursor: String!
}

enum StateOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  code_ASC
  code_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatePreviousValues {
  id: ID!
  title: String!
  code: String!
}

type StateSubscriptionPayload {
  mutation: MutationType!
  node: State
  updatedFields: [String!]
  previousValues: StatePreviousValues
}

input StateSubscriptionWhereInput {
  AND: [StateSubscriptionWhereInput!]
  OR: [StateSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StateWhereInput
}

input StateUpdateInput {
  title: String
  code: String
}

input StateWhereInput {
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
}

input StateWhereUniqueInput {
  id: ID
  title: String
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  state(where: StateSubscriptionWhereInput): StateSubscriptionPayload
  individual(where: IndividualSubscriptionWhereInput): IndividualSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
}
